// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSHorizontalBlur
#pragma kernel CSBloom

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
shared Texture2D<float4> SrcTexture;
shared RWTexture2D<float4> HorizontalResult;
RWTexture2D<float4> Result;

float BloomValue;


[numthreads(8, 8, 1)]
void CSHorizontalBlur(uint3 id : SV_DispatchThreadID)
{
    int start = max(0, (int) id.x - BloomValue);
    int count = min(BloomValue, (int) id.x) + min(BloomValue, SrcTexture.Length.x - (int) id.x);

    uint2 index = uint2(start, id.y);
    float4 color = 0;

    [unroll(100)]
    for (int i = 0; i < count; i++)
    {
        color += SrcTexture[index];
        index.x++;
    }
    color /= (float) count;

    HorizontalResult[id.xy] = color;
}

[numthreads(8, 8, 1)]
void CSBloom(uint3 id : SV_DispatchThreadID)
{
    int start = max(0, (int) id.y - BloomValue);
    int count = min(BloomValue, (int) id.y) + min(BloomValue, SrcTexture.Length.y - (int) id.y);
    
    int2 index = uint2(id.x, start);
    float4 color = 0;
    
    [unroll(100)]
    for (int i = 0; i < count; i++)
    {
        color += HorizontalResult[index];
        index.y++;
    }
    color /= (float) count;
    
    Result[id.xy] = SrcTexture[id.xy] * (color * BloomValue);
}
